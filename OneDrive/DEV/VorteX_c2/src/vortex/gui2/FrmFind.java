/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrmFind.java
 *
 * Created on 25-Oct-2010, 20:32:15
 */
package vortex.gui2;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import samusik.glasscmp.GlassFrame;
import clustering.Cluster;
import clustering.ClusterSet;

/**
 *
 * @author Nikolay
 */
public class FrmFind extends GlassFrame {

    ClusteringResultList cssb;
    ClusterSetBrowser csb;
    ClusterBrowserPane cbp;
    DefaultTableModel tm;

    /**
     * Creates new form FrmFind
     */
    public FrmFind() {
        initComponents();
        this.cssb = frmMain.getInstance().getClusterSetsBrowser();
        this.csb = frmMain.getInstance().getClusterSetBrowser();
        this.cbp = frmMain.getInstance().getClusterBrowserPane();

        tm = (DefaultTableModel) tab.getModel();

        tab.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int row = tab.getSelectedRow();
                if (row >= 0) {
                    ClusterSet sel = (ClusterSet) tm.getValueAt(row, 1);
                    cssb.selectClusterSet(sel);
                    csb.selectClusters(new Cluster[]{(Cluster) tm.getValueAt(row, 2)});

                }
            }
        });

        setBounds(300, 400, 800, 600);



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        glassEdit1 = new samusik.glasscmp.GlassEdit();
        glassButton1 = new samusik.glasscmp.GlassButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        glassEdit1.setToolTipText("Enter ProfileID. You can use wildcards: '?' stands for 'any symbol' and '*' for 'any symbol zero or more times'.");
        glassEdit1.setMinimumSize(new java.awt.Dimension(100, 28));
        glassEdit1.setPreferredSize(new java.awt.Dimension(100, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(glassEdit1, gridBagConstraints);

        glassButton1.setText("Search");
        glassButton1.setMaximumSize(new java.awt.Dimension(80, 28));
        glassButton1.setMinimumSize(new java.awt.Dimension(80, 28));
        glassButton1.setPreferredSize(new java.awt.Dimension(80, 28));
        glassButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                glassButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        getContentPane().add(glassButton1, gridBagConstraints);

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ProfileID", "Cluster Set", "Cluster"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tab);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void glassButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_glassButton1ActionPerformed
        int cnt = tm.getRowCount();
        for (int i = 1; i <= cnt; i++) {
            tm.removeRow(cnt - i);
        }



        String pattern = glassEdit1.getText().trim();
        if (pattern.length() == 0) {
            return;
        }
        ClusterSet[] css = cssb.getSelectedClusterSets();
        for (ClusterSet cs : css) {
            Cluster[] cl = cs.getClusters();
            for (Cluster c : cl) {
                String[] s = null;//c.findMatchingProfileIDs(pattern);
                if (s != null) {
                    for (String pid : s) {
                        tm.addRow(new Object[]{pid, cs, c});
                    }
                }
            }
        }
    }//GEN-LAST:event_glassButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private samusik.glasscmp.GlassButton glassButton1;
    private samusik.glasscmp.GlassEdit glassEdit1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tab;
    // End of variables declaration//GEN-END:variables
}
