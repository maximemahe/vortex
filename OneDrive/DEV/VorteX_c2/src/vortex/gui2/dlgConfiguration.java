/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * dlgConfiguration.java
 *
 * Created on 22-Sep-2010, 00:59:01
 */
package vortex.gui2;

import clustering.Mode;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.ButtonModel;
import javax.swing.DefaultButtonModel;
import javax.swing.JColorChooser;
import samusik.glasscmp.GlassDialog;
import vortex.gui2.BarCodeTableCellRenderer.BarCodeOptions;
import vortex.util.Config;
import vortex.util.ConnectionManager;
import util.logger;

/**
 *
 * @author Nikolay
 */
public class dlgConfiguration extends GlassDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form dlgConfiguration
     */
    public dlgConfiguration(Frame frm) {
        super(frm, true);
        
    }

    @Override
    protected void dialogInit() {
        super.dialogInit();
        initComponents();
        setModal(true);
        setBounds(100, 100, 600, 400);
        loadDatasets();
        loadBarCodeOptions();
        jCheckBox1.setSelected(Mode.isUseMedian());
        jCheckBox1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Mode.setUseMedian(jCheckBox1.isSelected());
            }
        });
    }

    private void loadBarCodeOptions() {
        BarCodeTableCellRenderer.BarCodeOptions options = Config.loadBarCodeOptions();

        switch (options.getStyle()) {
            case DASHES:
                rbBarCodeDashes.setSelected(true);
                break;
            case STRIPES:
                rbBarCodeStripes.setSelected(true);
                break;
        }
        panBarcodeColorDown.setBackground(options.getCOLOR_DOWN());
        panBarcodeColorUp.setBackground(options.getCOLOR_UP());
    }

    private void loadDatasets() {
        try {
            String[] dsID = ConnectionManager.getStorageEngine().getAvailableDatasetNames();
            String[] selectedDSIDs = Config.getDatasetIDsForLoading();
            lst.clear();
            ArrayList<String> al = new ArrayList<>();

            for (int i = 0; i < selectedDSIDs.length; i++) {
                if (selectedDSIDs[i] != null) {
                    al.add(selectedDSIDs[i]);
                }

            }
            selectedDSIDs = al.toArray(new String[al.size()]);
            for (String s : dsID) {
                if (selectedDSIDs != null && s != null) {
                    Arrays.sort(selectedDSIDs);
                    int idx = Arrays.binarySearch(selectedDSIDs, s);
                    if (idx >= 0 && idx < dsID.length) {
                        if (selectedDSIDs[idx].equals(s)) {
                            lst.getSelectedListModel().addElement(s);
                            continue;
                        }
                    }
                }
                lst.getAvailableListModel().addElement(s);
            }
        } catch (SQLException e) {
            logger.showException(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        tabOptions = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lst = new samusik.glasscmp.GlassListSelector();
        cmdChooseConn = new samusik.glasscmp.GlassButton();
        jPanel2 = new javax.swing.JPanel();
        glassPanel1 = new samusik.glasscmp.GlassPanel();
        panBarcodeColorUp = new javax.swing.JPanel();
        panBarcodeColorDown = new javax.swing.JPanel();
        rbBarCodeDashes = new javax.swing.JRadioButton();
        rbBarCodeStripes = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        chkRainbow = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        cmdDone = new samusik.glasscmp.GlassButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select datasets to load");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0,0,0,0));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(lst, gridBagConstraints);

        cmdChooseConn.setText("Choose database host");
        cmdChooseConn.setMaximumSize(new java.awt.Dimension(140, 30));
        cmdChooseConn.setMinimumSize(new java.awt.Dimension(140, 30));
        cmdChooseConn.setPreferredSize(new java.awt.Dimension(140, 30));
        cmdChooseConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdChooseConnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel1.add(cmdChooseConn, gridBagConstraints);

        tabOptions.addTab("Datasets", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        glassPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Barcodes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP));
        glassPanel1.setLayout(new java.awt.GridBagLayout());

        panBarcodeColorUp.setBackground(new java.awt.Color(0, 255, 0));
        panBarcodeColorUp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        panBarcodeColorUp.setToolTipText("Click to change");
        panBarcodeColorUp.setMinimumSize(new java.awt.Dimension(200, 20));
        panBarcodeColorUp.setPreferredSize(new java.awt.Dimension(200, 20));
        panBarcodeColorUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panBarcodeColorUpMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        glassPanel1.add(panBarcodeColorUp, gridBagConstraints);

        panBarcodeColorDown.setBackground(new java.awt.Color(255, 0, 0));
        panBarcodeColorDown.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        panBarcodeColorDown.setToolTipText("Click to change");
        panBarcodeColorDown.setMaximumSize(new java.awt.Dimension(200, 20));
        panBarcodeColorDown.setMinimumSize(new java.awt.Dimension(200, 20));
        panBarcodeColorDown.setPreferredSize(new java.awt.Dimension(200, 20));
        panBarcodeColorDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panBarcodeColorDownMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        glassPanel1.add(panBarcodeColorDown, gridBagConstraints);

        buttonGroup1.add(rbBarCodeDashes);
        rbBarCodeDashes.setSelected(true);
        rbBarCodeDashes.setText("Bar Graph");
        rbBarCodeDashes.setOpaque(false);
        rbBarCodeDashes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBarCodeDashesActionPerformed(evt);
            }
        });
        rbBarCodeDashes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rbBarCodeDashesPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        glassPanel1.add(rbBarCodeDashes, gridBagConstraints);

        rbBarCodeStripes.setBackground(new java.awt.Color(241, 239, 226));
        buttonGroup1.add(rbBarCodeStripes);
        rbBarCodeStripes.setText("Coloured Stripes");
        rbBarCodeStripes.setOpaque(false);
        rbBarCodeStripes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBarCodeStripesActionPerformed(evt);
            }
        });
        rbBarCodeStripes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                rbBarCodeStripesPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 6);
        glassPanel1.add(rbBarCodeStripes, gridBagConstraints);

        jLabel1.setText("Up:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Down:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Example:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Type:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        glassPanel1.add(jLabel4, gridBagConstraints);

        jPanel5.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        glassPanel1.add(jPanel5, gridBagConstraints);

        chkRainbow.setText("Rainbow color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        glassPanel1.add(chkRainbow, gridBagConstraints);

        jLabel5.setText("Raibow color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        glassPanel1.add(jLabel5, gridBagConstraints);

        jCheckBox1.setBackground(new java.awt.Color(0,0,0,0));
        jCheckBox1.setText("Show cluster medians instead of means (slow)");
        jCheckBox1.setDoubleBuffered(true);
        jCheckBox1.setOpaque(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        glassPanel1.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(glassPanel1, gridBagConstraints);

        tabOptions.addTab("Visualization options", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(tabOptions, gridBagConstraints);

        cmdDone.setText("Done");
        cmdDone.setMaximumSize(new java.awt.Dimension(90, 30));
        cmdDone.setMinimumSize(new java.awt.Dimension(90, 30));
        cmdDone.setPreferredSize(new java.awt.Dimension(90, 30));
        cmdDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        getContentPane().add(cmdDone, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDoneActionPerformed
        ArrayList<String> al = lst.getSelectedItems();
        String[] dsIDs = al.toArray(new String[al.size()]);
        Config.setDatasetIDsForLoading(dsIDs);
        BarCodeOptions o = BarCodeTableCellRenderer.getOptions();
        if(o==null)o=new BarCodeTableCellRenderer.BarCodeOptions(panBarcodeColorUp.getBackground(), panBarcodeColorDown.getBackground(), rbBarCodeDashes.isSelected()?BarCodeTableCellRenderer.BarcodePaintStyle.DASHES:BarCodeTableCellRenderer.BarcodePaintStyle.STRIPES, getPosNegWeight(),chkRainbow.isSelected());
        Config.saveBarCodeOptions(o);
        this.setVisible(false);
    }//GEN-LAST:event_cmdDoneActionPerformed

    private void cmdChooseConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdChooseConnActionPerformed
        (new dlgSelectDatabaseHost(frmMain.getInstance(), true)).setVisible(true);
        loadDatasets();
    }//GEN-LAST:event_cmdChooseConnActionPerformed

    private void rbBarCodeDashesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rbBarCodeDashesPropertyChange
    }//GEN-LAST:event_rbBarCodeDashesPropertyChange

    private void rbBarCodeStripesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_rbBarCodeStripesPropertyChange
    }//GEN-LAST:event_rbBarCodeStripesPropertyChange

    private double getPosNegWeight() {
        return 0.5;
    }

    private void panBarcodeColorUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBarcodeColorUpMouseClicked
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.BarcodePaintStyle style = BarCodeTableCellRenderer.getOptions().getStyle();
        u = JColorChooser.showDialog(this, "Choose color for positive values", u);
        panBarcodeColorUp.setBackground(u);
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, style, getPosNegWeight(),chkRainbow.isSelected()));
        glassPanel1.repaint();
    }//GEN-LAST:event_panBarcodeColorUpMouseClicked

    private void panBarcodeColorDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panBarcodeColorDownMouseClicked
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.BarcodePaintStyle style = BarCodeTableCellRenderer.getOptions().getStyle();
        d = JColorChooser.showDialog(this, "Choose color for negative values", d);
        panBarcodeColorDown.setBackground(d);
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, style, getPosNegWeight(),chkRainbow.isSelected()));
        glassPanel1.repaint();
    }//GEN-LAST:event_panBarcodeColorDownMouseClicked

    private void rbBarCodeDashesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBarCodeDashesActionPerformed
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, BarCodeTableCellRenderer.BarcodePaintStyle.DASHES, getPosNegWeight(),chkRainbow.isSelected()));
        glassPanel1.repaint();
    }//GEN-LAST:event_rbBarCodeDashesActionPerformed

    private void rbBarCodeStripesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBarCodeStripesActionPerformed
        Color d = BarCodeTableCellRenderer.getOptions().getCOLOR_DOWN();
        Color u = BarCodeTableCellRenderer.getOptions().getCOLOR_UP();
        BarCodeTableCellRenderer.setConfig(new BarCodeTableCellRenderer.BarCodeOptions(u, d, BarCodeTableCellRenderer.BarcodePaintStyle.STRIPES, getPosNegWeight(),chkRainbow.isSelected()));
        glassPanel1.repaint();
    }//GEN-LAST:event_rbBarCodeStripesActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkRainbow;
    private samusik.glasscmp.GlassButton cmdChooseConn;
    private samusik.glasscmp.GlassButton cmdDone;
    private samusik.glasscmp.GlassPanel glassPanel1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private samusik.glasscmp.GlassListSelector lst;
    private javax.swing.JPanel panBarcodeColorDown;
    private javax.swing.JPanel panBarcodeColorUp;
    private javax.swing.JRadioButton rbBarCodeDashes;
    private javax.swing.JRadioButton rbBarCodeStripes;
    private javax.swing.JTabbedPane tabOptions;
    // End of variables declaration//GEN-END:variables
}
