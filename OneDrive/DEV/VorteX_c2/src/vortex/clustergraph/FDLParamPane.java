/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package vortex.clustergraph;

import clustering.AngularDistance;
import clustering.Dataset;
import clustering.DistanceMeasure;
import clustering.EuclideanDistance;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Nikolay Samusik
 */
public class FDLParamPane extends javax.swing.JPanel {

    /**
     * Creates new form FDLParamPane
     */
    public FDLParamPane(Dataset ds) {
        initComponents();
        cmbParam.setModel(new DefaultComboBoxModel<>(ds.getFeatureNamesCombined()));
    }

    public DistanceMeasure getDM() {
        return cmbDM.getSelectedItem().toString().equals("Angular Distance") ? new AngularDistance() : new EuclideanDistance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbDM = new javax.swing.JComboBox<>();
        spinNumNodes = new javax.swing.JSpinner();
        spinNN = new javax.swing.JSpinner();
        lblParamName = new javax.swing.JLabel();
        lblParamRange = new javax.swing.JLabel();
        spinParamRange = new javax.swing.JSpinner();
        chkLim = new javax.swing.JCheckBox();
        cmbParam = new javax.swing.JComboBox<>();
        chkProportional = new javax.swing.JCheckBox();
        spinPower = new javax.swing.JSpinner();
        chkVary = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jLabel1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(jLabel3, gridBagConstraints);

        cmbDM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Angular Distance", "Euclidean Distance", " " }));
        cmbDM.setMinimumSize(new java.awt.Dimension(114, 25));
        cmbDM.setPreferredSize(new java.awt.Dimension(114, 25));
        cmbDM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDMActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(cmbDM, gridBagConstraints);

        spinNumNodes.setModel(new javax.swing.SpinnerNumberModel(200, 1, null, 1));
        spinNumNodes.setMinimumSize(new java.awt.Dimension(63, 20));
        spinNumNodes.setPreferredSize(new java.awt.Dimension(63, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(spinNumNodes, gridBagConstraints);

        spinNN.setModel(new javax.swing.SpinnerNumberModel(10, 2, 1000, 1));
        spinNN.setPreferredSize(new java.awt.Dimension(63, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(spinNN, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblParamName, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.lblParamName.text")); // NOI18N
        lblParamName.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(lblParamName, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lblParamRange, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.lblParamRange.text")); // NOI18N
        lblParamRange.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(lblParamRange, gridBagConstraints);

        spinParamRange.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, null, 1.0d));
        spinParamRange.setEnabled(false);
        spinParamRange.setMinimumSize(new java.awt.Dimension(63, 20));
        spinParamRange.setPreferredSize(new java.awt.Dimension(63, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(spinParamRange, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(chkLim, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.chkLim.text")); // NOI18N
        chkLim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLimActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(chkLim, gridBagConstraints);

        cmbParam.setEnabled(false);
        cmbParam.setPreferredSize(new java.awt.Dimension(28, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(cmbParam, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(chkProportional, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.chkProportional.text")); // NOI18N
        chkProportional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkProportionalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(chkProportional, gridBagConstraints);

        spinPower.setModel(new javax.swing.SpinnerNumberModel(0.33d, 0.0d, 1.0d, 1.0d));
        spinPower.setEnabled(false);
        spinPower.setMinimumSize(new java.awt.Dimension(63, 20));
        spinPower.setPreferredSize(new java.awt.Dimension(63, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        add(spinPower, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(chkVary, org.openide.util.NbBundle.getMessage(FDLParamPane.class, "FDLParamPane.chkVary.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(chkVary, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void chkLimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLimActionPerformed
        for (Component c : new Component[]{cmbParam, lblParamName, lblParamRange, spinParamRange}) {
            c.setEnabled(chkLim.isSelected());
        }
    }//GEN-LAST:event_chkLimActionPerformed

    private void cmbDMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDMActionPerformed

    private void chkProportionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkProportionalActionPerformed
        spinPower.setEnabled(chkProportional.isSelected());
    }//GEN-LAST:event_chkProportionalActionPerformed

    public boolean proportionalSampling(){
        return chkProportional.isSelected();
    }
    
    public boolean adaptiveConn(){
        return chkVary.isSelected();
    }
    
    public double power(){
        return (Double) spinPower.getValue();
    }
    
    public int getNumNodes() {
        return (Integer) spinNumNodes.getValue();
    }

    public int getKNN() {
        return (Integer) spinNN.getValue();
    }

    public int getRestrictionParam() {
        return limitByParam() ? cmbParam.getSelectedIndex() : -1;
    }

    public double getRestrictionParamRange() {
        return (Double) spinParamRange.getValue();
    }

    public boolean limitByParam() {
        return chkLim.isSelected();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkLim;
    private javax.swing.JCheckBox chkProportional;
    private javax.swing.JCheckBox chkVary;
    private javax.swing.JComboBox<String> cmbDM;
    private javax.swing.JComboBox<String> cmbParam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblParamName;
    private javax.swing.JLabel lblParamRange;
    private javax.swing.JSpinner spinNN;
    private javax.swing.JSpinner spinNumNodes;
    private javax.swing.JSpinner spinParamRange;
    private javax.swing.JSpinner spinPower;
    // End of variables declaration//GEN-END:variables
}
